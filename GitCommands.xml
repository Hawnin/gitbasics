
***************		BASIC GIT		****************
 git config --list
 git config --global user.name "John Doe"
 git config --global user.email johndoe@example.com
 git config user.name 
 git config --show-origin rerere.autoUpdate //Tells you which config is the value from
 git help <verb>
 git -h <verb>
 git clone https://github.com/libgit2/libgit2 //clone a repository
 git status
 git status -s  // short version
 git diff //What have you changed but not yet staged? And what have you staged that you are about to commit?
 git commit -a // with -a git automatically stage your file and you dont have to use git add
 git rm //remove the file from git, it wont be tracked anymore as well, if alread tracked use -f 
 git mv file_from file_to
 git log // to check history, it contains all logs which have been committed
 git commit --amend // If you forgot to add something or redo that commit

 //Example for commit amend: Basically its replacing your previous commit
 * git commit -m 'initial commit' 
 * git add forgotten_file 
 * git commit --amend
 //end

 git reset HEAD <file> // to unstage a file
 git checkout -- <file> // remove the modifications you made.
 git remote // to see which server configured for you 
 git remote  -v // shows the link where it get pushed and fetched
 git remote add pb https://github.com/paulboone/ticgit // pb will be a string which value is the string
 git remote add <shortname> <url> // add  aremote repository, and a shortname for it for later use.

 git push <remote> <branch> //if you want to share your project upstream
 git push origin master //to push your project to the origin branch
 git remote show origin // shows information of a particulare remote
 git remote rename <from> <to> // to change a short name, it changes the remote names as well
 git remote remove <name> // to remove a remote branch
 
 git tag // shows the available tags -l for listing
 git tag -l "v1.8.5*" //for searching
 git tag -a v1.4 -m "my version 1.4" //this is for 
 git push origin <tagname> // for sharing tag names remotely. git push dont share it normaly
 git push origin --tags // to push all of your tags to the server.
 
 git checkout -b version2 v2.0.0 // Switched to a new branch 'version2', in case if you want to fix a bug in an old version.

 //Set up alias name for your git commands, its pretty much recommended
 * git config --global alias.co checkout
 * git config --global alias.br branch
 * git config --global alias.ci commit
 * git config --global alias.st status
 * git config --global alias.unstage 'reset HEAD --'
 * git config --global alias.last 'log -1 HEAD'
 * Instructions: insted uf using git commit use git ci
 //end
 
 // Branch
 git branch iss53 // create a branch iss53
 git checkout iss53 // change to iss53 branch 
 git checkout -b hotfix // create the hotfix branch and switch to it
 git merge hotfix // merge the current branch with the hotfix branch
 git branch -d hotfix // delet a branch
 git branch -v // to see the last modification on the branch
 git branch --merged // to see already merged branches
 git branch --no-merged // to see the not merged branches 
 git branch --no-merged master // to check from other branch what is not merged yet 
 git branch -vv // tells you if the branches ahead or behinde or both
 
 //Remote branches
 git ls-remote [remote] // show references (pointers) in your remote repositories includinb branches tags etc.
 git remote show [remote] // show references (pointers) in your remote repositories includinb branches tags etc.
 git clone -o booyah //Origin branch renamed to booyah
 git fetch origin // upload the not synchronized updates to origin branch 
 git remote add <name> <URL> // add a remote repository with the name you defined for the url
 git push <remote> <branch> // push your branch to the remote server
 git fetch --all; git branch -vv // fetch all the local branches then show the current status of branches compared to origin
 git pull // basically is a fatch and merge followed by eachother. If its tracked branch then will look up for the server and branch, will fatch from server and then try to merge in the remote branch
 git push <remote> --delete <branch name on remote>
 git push origin --delete serverfix // to delete from the server
 
 //Merge tool
 git mergetool
 
 //Rebase ------------- Do not rebase commits that exist outside your repository ------------- messing with history.
 git rebase <branch> // it merges the branch into the current branch, the difference is a cleaner history log
 git rebase --onto master server client // rebase your client to your master also include the same change from server-clien branches (client have been branched from server, until that point it will be merged to client page 83)
 git rebase <basebranch> <topicbranch> // it chekcing out your topic branch and replays it onto your base branch
 git pull --rebase // it trys to determine the previous rebase and your branch difference, and try to apply the changes from where not duplicated.
 
 
 *********************		SERVER SETUP SECTION		************************
 // 4 protocol to transfer data:  Local, HTTP, Secure Shell (SSH), Git.
 
 **Local**
 git clone /srv/git/project.git // faster then file://
 git clone file:///srv/git/project.git // includes everything like references, objects,
 git remote add local_proj /srv/git/project.git // add local project to repository
 git pull /home/john/project // pulling from home server
 
 **HTTP**
 // It uses Smart HTTP protocol through HTTPS port if server fails it fail over to dumpb HTTP protocol 
 // setting up post-update hook
 cd /var/www/htdocs/ 
 git clone --bare /path/to/git_project gitproject.git 
 cd gitproject.git 
 mv hooks/post-update.sample hooks/post-update 
 chmod a+x hooks/post-update
 git clone https://example.com/gitproject.git
 
 **SSH**
 git clone ssh://[user@]server/project.git // Users need a SSH key
 
 **GIT**
 // uses port(9418)
 //you must create a git-daemon-export-ok file
 //no authentication req, anyone from internet can push to your project if they find the URL
 
 Getting on SERVER
 git clone --bare my_project my_project.git // create a bare repository without working directory
 cp -Rf my_project/.git my_project.git // equivalent with the above 
 
 *********************		COMMIT GUIDELINES AND COMMENTS		************************
 // Message should be 50 character, describe the changeset concisely
 // followed by blank lineage
 // followed by more detailed eplxanation which includes motivation, and contrast in behaviour to previous implementation.
 ***EXAMPLE***
 Short (50 chars or less) summary of changes
 
 More detailed explanatory text, if necessary.  
 Wrap it to about 72 characters or so.  
 In some contexts, the first line is treated as the subject of an email and the rest of the text as the body.  
 The blank line separating the summary from the body is critical (unless you omit the body entirely); 
 tools like rebase can get confused if you run the two together.
 
 Further paragraphs come after blank lines.
  - Bullet points are okay, too

  - Typically a hyphen or asterisk is used for the bullet,
    preceded by a single space, with blank lines in
    between, but conventions vary here

 
 
