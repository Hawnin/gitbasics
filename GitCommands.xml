
***************		BASIC GIT		****************
 git config --list
 git config --global user.name "John Doe"
 git config --global user.email johndoe@example.com
 git config user.name 
 git config --show-origin rerere.autoUpdate //Tells you which config is the value from
 git help <verb>
 git -h <verb>
 git clone https://github.com/libgit2/libgit2 //clone a repository
 git status
 git status -s  // short version
 git diff //What have you changed but not yet staged? And what have you staged that you are about to commit?
 git commit -a // with -a git automatically stage your file and you dont have to use git add
 git rm //remove the file from git, it wont be tracked anymore as well, if alread tracked use -f 
 git mv file_from file_to
 git log // to check history, it contains all logs which have been committed
 git commit --amend // If you forgot to add something or redo that commit

 //Example for commit amend: Basically its replacing your previous commit
 * git commit -m 'initial commit' 
 * git add forgotten_file 
 * git commit --amend
 //end

 git reset HEAD <file> // to unstage a file
 git checkout -- <file> // remove the modifications you made.
 git remote // to see which server configured for you 
 git remote  -v // shows the link where it get pushed and fetched
 git remote add pb https://github.com/paulboone/ticgit // pb will be a string which value is the string
 git remote add <shortname> <url> // add  aremote repository, and a shortname for it for later use.

 git push <remote> <branch> //if you want to share your project upstream
 git push origin master //to push your project to the origin branch
 git remote show origin // shows information of a particulare remote
 git remote rename <from> <to> // to change a short name, it changes the remote names as well
 git remote remove <name> // to remove a remote branch
 
 git tag // shows the available tags -l for listing
 git tag -l "v1.8.5*" //for searching
 git tag -a v1.4 -m "my version 1.4" //this is for 
 git push origin <tagname> // for sharing tag names remotely. git push dont share it normaly
 git push origin --tags // to push all of your tags to the server.
 
 git checkout -b version2 v2.0.0 // Switched to a new branch 'version2', in case if you want to fix a bug in an old version.

 //Set up alias name for your git commands, its pretty much recommended
 * git config --global alias.co checkout
 * git config --global alias.br branch
 * git config --global alias.ci commit
 * git config --global alias.st status
 * git config --global alias.unstage 'reset HEAD --'
 * git config --global alias.last 'log -1 HEAD'
 * Instructions: insted uf using git commit use git ci
 //end
 
 // Branch
 git branch iss53 // create a branch iss53
 git checkout iss53 // change to iss53 branch 
 git checkout -b hotfix // create the hotfix branch and switch to it
 git merge hotfix // merge the current branch with the hotfix branch
 git branch -d hotfix // delet a branch
 git branch -v // to see the last modification on the branch
 git branch --merged // to see already merged branches
 git branch --no-merged // to see the not merged branches 
 git branch --no-merged master // to check from other branch what is not merged yet 
 git branch -vv // tells you if the branches ahead or behinde or both
 
 //Remote branches
 git ls-remote [remote] // show references (pointers) in your remote repositories includinb branches tags etc.
 git remote show [remote] // show references (pointers) in your remote repositories includinb branches tags etc.
 git clone -o booyah //Origin branch renamed to booyah
 git fetch origin // upload the not synchronized updates to origin branch 
 git remote add <name> <URL> // add a remote repository with the name you defined for the url
 git push <remote> <branch> // push your branch to the remote server
 git fetch --all; git branch -vv // fetch all the local branches then show the current status of branches compared to origin
 git pull // basically is a fatch and merge followed by eachother. If its tracked branch then will look up for the server and branch, will fatch from server and then try to merge in the remote branch
 git push <remote> --delete <branch name on remote>
 git push origin --delete serverfix // to delete from the server
 
 //Merge tool
 git mergetool
 
 //Rebase ------------- Do not rebase commits that exist outside your repository ------------- messing with history.
 git rebase <branch> // it merges the branch into the current branch, the difference is a cleaner history log
 git rebase --onto master server client // rebase your client to your master also include the same change from server-clien branches (client have been branched from server, until that point it will be merged to client page 83)
 git rebase <basebranch> <topicbranch> // it chekcing out your topic branch and replays it onto your base branch
 git pull --rebase // it trys to determine the previous rebase and your branch difference, and try to apply the changes from where not duplicated.
 
 
 *********************		SERVER SETUP SECTION		************************
 // 4 protocol to transfer data:  Local, HTTP, Secure Shell (SSH), Git.
 
 **Local**
 git clone /srv/git/project.git // faster then file://
 git clone file:///srv/git/project.git // includes everything like references, objects,
 git remote add local_proj /srv/git/project.git // add local project to repository
 git pull /home/john/project // pulling from home server
 
 **HTTP**
 // It uses Smart HTTP protocol through HTTPS port if server fails it fail over to dumpb HTTP protocol 
 // setting up post-update hook
 cd /var/www/htdocs/ 
 git clone --bare /path/to/git_project gitproject.git 
 cd gitproject.git 
 mv hooks/post-update.sample hooks/post-update 
 chmod a+x hooks/post-update
 git clone https://example.com/gitproject.git
 
 **SSH**
 git clone ssh://[user@]server/project.git // Users need a SSH key
 
 **GIT**
 // uses port(9418)
 //you must create a git-daemon-export-ok file
 //no authentication req, anyone from internet can push to your project if they find the URL
 
 Getting on SERVER
 git clone --bare my_project my_project.git // create a bare repository without working directory
 cp -Rf my_project/.git my_project.git // equivalent with the above 
 
 *********************		COMMIT GUIDELINES AND COMMENTS		************************
 // Message should be 50 character, describe the changeset concisely
 // followed by blank lineage
 // followed by more detailed eplxanation which includes motivation, and contrast in behaviour to previous implementation.
 ***EXAMPLE***
 Short (50 chars or less) summary of changes
 
 More detailed explanatory text, if necessary.  
 Wrap it to about 72 characters or so.  
 In some contexts, the first line is treated as the subject of an email and the rest of the text as the body.  
 The blank line separating the summary from the body is critical (unless you omit the body entirely); 
 tools like rebase can get confused if you run the two together.
 
 Further paragraphs come after blank lines.
  - Bullet points are okay, too

  - Typically a hyphen or asterisk is used for the bullet,
    preceded by a single space, with blank lines in
    between, but conventions vary here
 
 git request-pull origin/master myfork // it gives you details where the work was branched from, summarizes the commits and identifies from they were pulled from.

 *********************		PATCH		************************
 
 git format-patch -M origin/master // Create a patch
 git diff // generate patch
 git apply /tmp/patch-ruby-client.patch // Apply patch which you recieved
 git apply --check <patch path/name> // see if the patch applies cleanly before you try actually applying it.
 git am // if the patch was generated with format-patch
 git am -3 <patch path/name> // if fails then it try to solve it with 3 way merge
 git am -3 -i mbox // look for all the patches and ask if you want to apply it
 git cherry-pick e43a6 // Cherry pick the e43a6 commit to your current branch.
 
 *********************		DIFF		************************
 git merge-base contrib master 
 git diff 36c7db // this two command is searching for the common ancestor then running difference on it (master branch might move forward in time thats why its neccessarry to see the correct log)
 git diff $(git merge-base contrib master) // Same as above just in one command.
 git diff master...contrib // Same as above, more convenient
 git config --global rerere.enabled true // this command allows git to automatically fix conflict which you have fixed before.
 
 *********************		TAG		************************
 //Tagging your last release in order to re create it anytime later.
 git tag -s v1.5 -m 'my signed 1.5 tag' // Release flags created with -s or -a 
 gpg --list-keys //show the secret keys
 gpg -a --export F721C45A | git hash-object -w --stdin //Import the Secret key and make a new blob into git which gives you back a HASH1
 git tag -a maintainer-pgp-pub <HASH CODE> //make a tag which points to the hash
 git show maintainer-pgp-pub | gpg --import // 
 
 ********************	SECRET KEY	***********************
 gpg --gen-key //to generate a secret key
 
 ********************	Release		*********************** 
 git archive master --prefix='Releasev1.5' --format=zip > `git describe master`.zip // creates a zip from your release
 
 ********************	GITLOG	************************
 git log // shows all the commits
 git show <HASH first 4 character> // this shows what happened in that commit
 git log --abbrev-commit --pretty=oneline  //show commits in one row
 git rev-parse <branch> // shows the last commits SHA1
 git reflog //showw all the reference where your HEAD pointer have been.
 git show HEAD@{5} // shows the 5th log from bottom
 git show master@{yesterday} // shows where your master branch were yesterday
 git log -g //  reflog in formatted output like git log
 git log --pretty=format:'%h %s' --graph //show log in graph mode.
 git show HEAD^ // shows HEAD's parent
 git show HEAD^2 // shows the HEAD's 2nd parent
 git show HEAD~3 // shows the HEAD's Parent of Parent
 git log master..experiment // shows whats in Experiment Branch which is not yet in Master branch
 git log origin/master..HEAD // shows whats in HEAD which is not yet in Remote Repository.
 git log featureAv2 featureBv2 --not master // shows whats master which is not in featureBv2 and featureAv2
 git log master...experiment  // shows all the commits which reachable by master or by experiment branch but not yet in both.
 
 ********************	GitHub		*********************** 
 git fetch origin refs/pull/958/head // it downloads the forks, basically somone pulled your project then made some modification, You want to donwload their modifications then you need to pull them 
 //also can modify config file to keep up-to-date all of your fetched pull req
 *[remote "origin"]
 *    url = https://github.com/libgit2/libgit2.git
 *    fetch = +refs/heads/*:refs/remotes/origin/*
 *    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
 *//Last line tells git to fetch all the data from that remote branch, all you need after this is git fetch.
 
 ********************	Commit, Staging, Statsh		*********************** 
 git add -i //Helps you to separate, and choose files which you want to include in a commit, (the logic behinde it is smaller commits which is not that messy as a big commit)
 // 5 option type ? to see the options
 git stash // save the modifications you made so you will able to change to different branch
 git stash list // list your stash
 git stash apply stash@{2} // to apply stash number 2
 git stash apply // to apply the most recent stash
 git stash apply --index  // to try to re apply the staged changes 
 git stash drop // to drop the most recent stash
 git stash pop // to re apply your stash then immediately drop it.
 git stash --keep-index // save the staged file and leave it in the index file as well.
 git stash -u  // to save everything, including untracked files.
 git stash --patch // prompt you which of the changes you want to keep in your working directory
 git stash branch <branch>  // will creat a branch from your stash, usefull if you want to try safely your old changes on a file which you modified since.
							// most recent stash will be created as a branch, stash will be dropped
 
 ********************	Remove	***********************
 git clean // to remove files in your directory which untracked and not ingored.
 git stash --all //to remove everything but store them in a stash
 git clean -d -n // will tell you what it would remove
 git clean -n -d -x // remove files which generated by the build -x  
 git clean -x -i // run it in interactive mode.
 
 ********************	Sign your work	***********************
 gpg --gen-key // generate a key for yourself
 git config --global user.signingkey 0A46826A // make git to use your key for signing
 git tag -s v1.5 -m 'my signed 1.5 tag' // -s to sign your work
 git show v1.5 // to check your signature
 git tag -v <tag-name> // to verify the tag
 git commit -a -S -m 'signed commit' // -S to sign your commit
 git log --show-signature -1 // to check the signed commit
 git log --pretty="format:%h %G? %aN  %s" // to check any signatures
 git merge --verify-signatures non-verify // git check if commits have trusted GPG signature, if not rejects.
 git merge --verify-signatures -S  signed-branch // Verifies if the commits in the branch are signed and after merge it will sign the merge commit as well.

 ********************	Search	***********************
 git grep -n gmtime_r // with -n it will print out the lines where git found matches.
 git grep --count gmtime_r // show you the files and how many items are found
 git grep -p gmtime_r *.c  // to show you the context of the searching
 git grep --break --heading \     -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0 // with and you can add more criteria to search, --break --heading will format it into readable format
 git log -S feature --oneline // will give you the resoult of a log where the feature has been added.
 git diff <HASH1><HASH1> // to see the diff between the 2 change which was found 
 git log -L :git_deflate_bound:zlib.c // to check all the changes made to function <git_deflate_bound> in  <zlib.c>
 
 ********************	Modify Log	***********************
 git commit --amend // change the last commit comments
 git commit --amend // you can change the content of your commit, by simply modifying the files before using the command, dont use it if commit have been pushed.
 git commit --amend --no-edit // to only amend the missing files or modifications, no commet change
 git rebase -i HEAD~3 // will rebase the last 3 commit, in the editor change PICK to EDIT in order to change the commit
 git rebase -i HEAD~3 // if you delet a row from the text editor that will resoult a full commit removal.
 git rebase -i HEAD~3 // if you change 2/3 lines PICK to SQUASH it will merge the commits into the 1/3 which remained at PICK
 git log --pretty=format:"%h %s" HEAD~3..HEAD // to check the modified log, Note: Order is changed
 
 git filter-branch --subdirectory-filter trunk HEAD // make a subdirectory to a new root, git automatically remove commits that did not affect the subdirectory
 
 * git filter-branch --commit-filter '
 *        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
 *        then
 *                GIT_AUTHOR_NAME="Scott Chacon";
 *                GIT_AUTHOR_EMAIL="schacon@example.com";
 *                git commit-tree "$@";
 *        else
 *                git commit-tree "$@";
 *        fi' HEAD
 **//to rewrite every commits email address.
 git cat-file -p HEAD //list checksum for the file in HEAD snapshot
 git ls-tree -r HEAD //list the files in the directury wiht SHA1 chekcsum.
 git ls-files -s //show you how your index now looks like.
 
 ********************	Modify Head,Index,WorkingDirectory	***********************
 git reset <HSA-1> //moves what HEAD points to basically.
 git reset HEAD~ // basically undo git commit. move to Parent of HEAD
 git reset --soft HEAD~ // simply move the head file to one place behind and after running commit the history will be no longer available on the branch.
 
 
 *********************		Advanced Merging		************************
 git merge --abort // abort merging when merge conflict happens
 git reset --hard HEAD // your repository will be back to your last committed stage
 
 git ls-files -u // to get SHA-1 codes
 git diff --ours // to see what the difference was before introducing the modifications.
 git diff --theirs // to see what the difference on the new modifications compared to your master branch now.
 git diff --base // to see how the files changes from both side 
 git log --graph --oneline --decorate --all // to check the whole branch
 git checkout --conflict=diff3 file.txt // checkout the conflict if we want to get more context on the issue
 git config --global merge.conflictstyle diff3 // to set-up as default
 git log --oneline --left-right HEAD...MERGE_HEAD  // to check the log what was introduced to resolve the conflict
 git log --oneline --left-right --merge // to check logs on conflict.
  
 *********************		Undo Merges		************************
 Onkly-Locally
 git reset --hard HEAD~ // after git merge it will undo the change.
 git revert -m 1 HEAD // will revert the merging.
 git merge -Xours / -Xtheirs file.txt // will automatically merge even if there is a conflict since we specify which modification we want to merge
 
 ********************		Rerere		***************************
 git config --global rerere.enabled true // To enable rerere , basically will remember how you resolved a conflict.
 git rerere status // will tell you what has been recorded
 git rerere diff //show you the state of resolution and what you started with to resolve and what you have resolved it to.
 git ls-files -u
 
 ********************		Debugging		************************ //might be automated!!!!!!!!!!!!!!!!!!
 git blame -L 69,82 Makefile // show the 69-82 lines from Makefile linux kernel file.
 git blame -C -L 141,153 GITPackUpload.m // will check where the codes are originally came from.
 ** Binary Debug **
 git bisect start //To tell up bisect
 git bisect bad //To tell Bisect the current commit is bad
 git bisect <good_commit> // To tell bisect which commit was good and finely working before
 git bisect good // Bisect will check middle commit, you will try out if the problem existed there, if not state bisect good to continnue.
 git bisect reset // To tell bisect to reset HEAD to the commit where you were before.
 
 *******************		Submodules		*******************
 git submodule add https://github.com/chaconinc/DbConnector
 git diff --cached --submodule
 **Cloning**
 git clone https://github.com/chaconinc/MainProject // Cloning a project with sub modules, directory will be created but it will be empty
 git submodule init // to initialize the local configuration file
 git submodule update // to fecth all the data from the project
 git clone --recurse-submodules https://github.com/chaconinc/MainProject // will automatically update all submodules.
 git submodule update --remote // trying to update the specified submodule 
 git submodule update --remote --merge //immediately merges the change into your local stable version from github
 git submodule update --remote --rebase // if you dont use rebase or merge it will just update the submodule and reset your project header.
 git config push.recurseSubmodules on-demand // This set-up will make push command fail if submodule cannot be pushed to project
 **Tips**
 git submodule foreach 'git stash' // it will stash all of our changes in all of our submodules.
 git submodule foreach 'git checkout -b featureA' // create a feratureA branch in every of our submodule.
 **Config Aliases**
 git config alias.sdiff '!'"git diff && git submodule foreach 'git diff'" 
 git config alias.spush 'push --recurse-submodules=on-demand' 
 git config alias.supdate 'submodule update --remote --merge'
 submodule update --init // if you remove submodule from master (untracked) then you check back to the branch you should re populate it.
 **Moving Sub directory into Submodule**
 rm -Rf CryptoLibrary/ //before remove you have to unstage it first othewise you wont be able to add it to the submodule
 git submodule add https://github.com/chaconinc/CryptoLibrary //add the library to submodule
 
 *******************		Bundle		*******************
 git bundle // to put your files into binary format and you will able to put them on HDD to give to others
 git bundle create repo.bundle HEAD master //
 git bundle create commits.bundle master ^9a466c5 // create a bundle from the commit Hash above commits
 git bundle verify ../commits.bundle // verify if the bundle is a valid commit bundle
 
 
 //review again
 Generation of TAGS
 Generation of Build Number
 Setting up Webhook
 
 Sterling Configuration Deployment Tool.
 
 
 page 300
 
 